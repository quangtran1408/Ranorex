///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Chrome_Test.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Search recording.
    /// </summary>
    [TestModule("d3aa34cb-271f-4d5e-a490-dfc83757e46c", ModuleType.Recording, 1)]
    public partial class Search : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::Chrome_Test.Chrome_TestRepository repository.
        /// </summary>
        public static global::Chrome_Test.Chrome_TestRepository repo = global::Chrome_Test.Chrome_TestRepository.Instance;

        static Search instance = new Search();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Search()
        {
            search_name = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Search Instance
        {
            get { return instance; }
        }

#region Variables

        string _search_name;

        /// <summary>
        /// Gets or sets the value of variable search_name.
        /// </summary>
        [TestVariable("8dd9dc6b-9d82-45a7-bfc5-6d3b2d364c3d")]
        public string search_name
        {
            get { return _search_name; }
            set { _search_name = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Invoke action", "Invoking Focus() on item 'GoogleChrome_window'.", repo.GoogleChrome_window.SelfInfo, new RecordItemIndex(0));
            repo.GoogleChrome_window.Self.Focus();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking EnsureVisible() on item 'GoogleChrome_window.address_textbox'.", repo.GoogleChrome_window.address_textboxInfo, new RecordItemIndex(1));
            repo.GoogleChrome_window.address_textbox.EnsureVisible();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking Focus() on item 'GoogleChrome_window.address_textbox'.", repo.GoogleChrome_window.address_textboxInfo, new RecordItemIndex(2));
            repo.GoogleChrome_window.address_textbox.Focus();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press.", new RecordItemIndex(3));
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, 30, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(4));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$search_name'.", new RecordItemIndex(5));
            Keyboard.Press(search_name);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(6));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(7));
            Delay.Duration(5000, false);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
